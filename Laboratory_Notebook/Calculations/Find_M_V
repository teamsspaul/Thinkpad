#!/usr/bin/env python3

"""
Chem Calculations
"""

__author__     =  "Paul Mendoza"
__copyright__  =  "Copyright 2016, Planet Earth"
__credits__    = ["Sunil Chirayath",
                  "Charles Folden",
                  "Jeremy Conlin"]
__license__    =  "GPL"
__version__    =  "1.0.1"
__maintainer__ =  "Paul Mendoza"
__email__      =  "paul.m.mendoza@gmail.com"
__status__     =  "Production"

################################################################
##################### Import packages ##########################
################################################################

import os.path
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime
from uncertainties import ufloat
from uncertainties.umath import *
from uncertainties import unumpy as unp
import re
import time
start_time = time.time()

import Functions as fun

#######################################################
# With known Molarity and volume of a solution
# how much, and of what concentration
# do we need to combine with a second solution
# to get a final solution of known concentration
# and volume
#######################################################
N=100
Range=0.1

Temperature=ufloat(24.8,3)
gramsOmol=ufloat(63.0130,0.0012)
dfDen=pd.read_csv('../Data/Nitric_Acid.csv')

M1=ufloat(15.43,0.06)
m1=ufloat(35.5,0.5)
Vol1=ufloat(0.5,0.005)
#M2=ufloat(0,0)
#m2=ufloat(0,0)

M3=ufloat(4,0.05)
m3=fun.ConvertMol(True,M3,gramsOmol,dfDen,Temperature)
Vol3=ufloat(2.5,0.025)

WtConcentration1=fun.GetWt(m1,gramsOmol)
#WtConcentration2=fun.GetWt(m2,gramsOmol)
WtConcentration3=fun.GetWt(m3,gramsOmol)

p1=fun.GetDensity(Temperature,WtConcentration1,dfDen)
p3=fun.GetDensity(Temperature,WtConcentration3,dfDen)

A=M3*Vol3-M1*Vol1
B=(1-WtConcentration3)*Vol3*p3-(1-WtConcentration1)*Vol1*p1
C=B/A

M2Guess=(M3*Vol3-M1*Vol1)/(Vol3-Vol1)
M2Range=np.linspace(M2Guess-M2Guess*Range,M2Guess+M2Guess*Range,N)
Compare=[]

for M2i in M2Range:
    m2i=fun.ConvertMol(True,M2i,gramsOmol,dfDen,Temperature)
    Wt2i=fun.GetWt(m2i,gramsOmol)
    p2i=fun.GetDensity(Temperature,Wt2i,dfDen)
    Compare.append(abs(C-((1-Wt2i)*p2i)/M2i))
    V2i=A/M2i
    if Compare==0:
        break

M2=M2Range[Compare.index(min(Compare))]
m2=fun.ConvertMol(True,M2,gramsOmol,dfDen,Temperature)
Wt2=fun.GetWt(m2,gramsOmol)
p2=fun.GetDensity(Temperature,Wt2,dfDen)
V2=A/M2

    
#Check if we are correct
mc3,pc3,Vc3,Wtc3,Mc3=fun.NewConcentration(m1,m2,gramsOmol,
                                          Temperature,dfDen,
                                          Vol1,V2)
#print(M2Guess,M2i,min(M2Range),max(M2Range))
#print(M3,Vol3)
#print(Mc3,Vc3)

#Print out answer
print("Combine "+str(Vol1)+" ml of "+str(M1)+\
      " M solution with "+str(V2)+\
      " ml of "+str(M2)+" M solution, to get "+str(Vol3)+" ml of "+\
      str(M3)+" M solution")

###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
