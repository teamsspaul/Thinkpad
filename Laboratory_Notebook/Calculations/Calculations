#!/usr/bin/env python3

"""
Chem Calculations
"""

__author__     =  "Paul Mendoza"
__copyright__  =  "Copyright 2016, Planet Earth"
__credits__    = ["Sunil Chirayath",
                  "Charles Folden",
                  "Jeremy Conlin"]
__license__    =  "GPL"
__version__    =  "1.0.1"
__maintainer__ =  "Paul Mendoza"
__email__      =  "paul.m.mendoza@gmail.com"
__status__     =  "Production"

################################################################
##################### Import packages ##########################
################################################################

import os.path
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime
from uncertainties import ufloat
from uncertainties.umath import *
from uncertainties import unumpy as unp
import re

import Functions as fun


################################################################
################## Examples of Calculations ####################
################################################################

#######################################################
############ Atom Fraction to Mass Fraction ###########
############          and vice versa        ###########
#######################################################

string='92235 0.285714286 0 92238 0.714285714 0'
MasstoAtom=True
Mass,Zaid=fun.StringToMass(string)
stringCalculated=fun.ConvertFractions(string,Mass,MasstoAtom,Zaid)

# if MasstoAtom:
#     print("Mass Fractions:")
#     print(string)
#     print("Atom Fractions:")
#     print(stringCalculated)
# else:
#     print("Mass Fractions:")
#     print(stringCalculated)
#     print("Atom Fractions:")
#     print(string)

#######################################################
############ Calculate grams per mol of ###############
############    a chemical formula      ###############
#######################################################

#Make sure your chemical form has no repeats
#And no parentheses
ChemicalFormula='U_2Na_2O'
ChemicalFormulaError=[0,0,0,0,0,0,0] #+/- error in integers of
                                     #chemical formula
ChemicalFormula=ChemicalFormula+"    "
List=fun.ChemList(ChemicalFormula)

#Enter Modifications:
#1. Each element should be a single item in the list
#2. Format: zaid atomfraction+/-error zaid atomfraction+/-error
#   or    : zaid atomfraction error zaid atomfraction
Modifications=['92235 0.2883155436+/-0.0000000024 92238 0.7116844564+/-0.0000000024',stringCalculated]

df = pd.read_csv('../Data/AtomicWeights.csv')


ModMass,ModSymbols,AtomFractions=fun.FormatMods(Modifications,df)
MolarMass=fun.DetermineMolarMass(List,df,
                                 ModSymbols,ModMass,
                                 AtomFractions,ChemicalFormulaError)


# print(MolarMass)

#######################################################
########### Calculate molality/molarity ###############
#######################################################

MolarityToMolality=False
quit()

##################################################
################### Gather Data ##################
##################################################

gramsOmol=20.01
#Density in grams per cc or grams per ml
density=ufloat(1.101,0.02)
Molality=ufloat(21.4,0.2) #HF

Molarity=ufloat(16.5,0.1)

##################################################
################## Calculation ###################
##################################################

if MolarityToMolality:
    #(mols/kg)
    Molality=1/(density/Molarity-gramsOmol*0.001)
else:
    #(mols/L)
    Molarity=density/(1/Molality+gramsOmol*0.001)

print("Molarity = "+str(Molarity))
print("Molality = "+str(Molality))
